rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can only write their own document
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // ============================================
    // MULTI-CANVAS ARCHITECTURE (PR #12)
    // ============================================
    
    // Canvases collection - users can access canvases they're collaborators on
    match /canvases/{canvasId} {
      // Users can read canvases they have access to
      allow read: if request.auth != null && 
        request.auth.uid in resource.data.collaboratorIds;
      
      // Users can create canvases (owner is creator)
      allow create: if request.auth != null && 
        request.resource.data.ownerId == request.auth.uid &&
        request.auth.uid in request.resource.data.collaboratorIds;
      
      // Only owner can update canvas metadata
      allow update: if request.auth != null && 
        resource.data.ownerId == request.auth.uid;
      
      // Only owner can delete canvas
      allow delete: if request.auth != null && 
        resource.data.ownerId == request.auth.uid;
      
      // Canvas shapes - scoped to canvas
      match /shapes/{shapeId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null;
        allow update: if request.auth != null;
        allow delete: if request.auth != null;
      }
      
      // Canvas groups - scoped to canvas
      match /groups/{groupId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && 
                         request.resource.data.createdBy == request.auth.uid;
        allow update: if request.auth != null;
        allow delete: if request.auth != null;
      }
      
      // Canvas selections - scoped to canvas
      match /selections/{userId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Canvas comments - scoped to canvas
      match /comments/{commentId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && 
                         request.resource.data.userId == request.auth.uid;
        allow update: if request.auth != null;
        allow delete: if request.auth != null && 
                         resource.data.userId == request.auth.uid;
      }
      
      // Canvas chat messages - scoped to canvas and private per user
      match /chatMessages/{messageId} {
        // Users can only read their own messages on this canvas
        allow read: if request.auth != null 
          && resource.data.userId == request.auth.uid;
        
        // Users can only create messages for themselves
        allow create: if request.auth != null 
          && request.resource.data.userId == request.auth.uid
          && request.resource.data.role in ['user', 'assistant']
          && request.resource.data.content is string;
        
        // Users can delete their own messages
        allow delete: if request.auth != null 
          && resource.data.userId == request.auth.uid;
        
        // No updates (messages cannot be edited)
        allow update: if false;
      }
    }
    
    // ============================================
    // LEGACY PATHS (for backwards compatibility)
    // TODO: Remove these after data migration
    // ============================================
    
    // Old main canvas document (deprecated)
    match /canvases/main {
      allow read, write: if request.auth != null;
    }
    
    // Old main canvas shapes (deprecated)
    match /canvases/main/shapes/{shapeId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }
    
    // Old groups collection (deprecated)
    match /canvases/main/groups/{groupId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                       request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }
    
    // Old selections (deprecated)
    match /canvases/main/selections/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Old comments collection (deprecated)
    match /canvases/main/comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                       request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null;
      allow delete: if request.auth != null && 
                       resource.data.userId == request.auth.uid;
    }
    
    // Old top-level chat messages (deprecated)
    match /chatMessages/{messageId} {
      allow read: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.canvasId is string
        && request.resource.data.role in ['user', 'assistant']
        && request.resource.data.content is string;
      
      allow delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      allow update: if false;
    }
  }
}
