import { 
  collection, 
  addDoc, 
  query, 
  where, 
  orderBy, 
  limit, 
  getDocs,
  serverTimestamp
} from 'firebase/firestore';
import { firestore } from '../firebase';
import type { ChatMessage, ChatMessageInput } from '../components/Chat/types';

/**
 * Firestore Document Structure (for reference):
 * {
 *   id: string;               // Auto-generated by Firestore
 *   canvasId: string;         // Canvas identifier
 *   userId: string;           // User identifier
 *   role: 'user' | 'assistant';
 *   content: string;          // Message text
 *   createdAt: Timestamp;     // Firestore serverTimestamp()
 * }
 */

/**
 * Saves a chat message to Firestore
 * 
 * @param message - Message data (canvasId, userId, role, content)
 * @returns Promise<string> - Document ID of saved message
 * @throws Error if validation fails or save fails
 */
export async function saveMessage(message: ChatMessageInput): Promise<string> {
  // Validate input
  if (!message.userId || message.userId.trim() === '') {
    throw new Error('User ID is required');
  }
  
  if (!message.canvasId || message.canvasId.trim() === '') {
    throw new Error('Canvas ID is required');
  }
  
  if (!message.content || message.content.trim() === '') {
    throw new Error('Message content is required');
  }
  
  if (message.content.length > 10000) {
    throw new Error('Message content exceeds maximum length of 10,000 characters');
  }
  
  if (!['user', 'assistant'].includes(message.role)) {
    throw new Error('Message role must be "user" or "assistant"');
  }

  try {
    // Create Firestore document with serverTimestamp
    const messagesRef = collection(firestore, 'chatMessages');
    const docRef = await addDoc(messagesRef, {
      canvasId: message.canvasId,
      userId: message.userId,
      role: message.role,
      content: message.content,
      createdAt: serverTimestamp()
    });

    return docRef.id;
  } catch (error) {
    console.error('Failed to save message:', error);
    throw error;
  }
}

/**
 * Loads chat history for a specific canvas and user
 * 
 * @param canvasId - Canvas ID to load messages for
 * @param userId - User ID to load messages for
 * @returns Promise<ChatMessage[]> - Array of messages (oldest first)
 * @throws Error if query fails
 */
export async function loadChatHistory(
  canvasId: string, 
  userId: string
): Promise<ChatMessage[]> {
  // Validate input
  if (!canvasId || canvasId.trim() === '') {
    throw new Error('Canvas ID is required');
  }
  
  if (!userId || userId.trim() === '') {
    throw new Error('User ID is required');
  }

  try {
    // Build Firestore query
    const messagesRef = collection(firestore, 'chatMessages');
    const q = query(
      messagesRef,
      where('canvasId', '==', canvasId),
      where('userId', '==', userId),
      orderBy('createdAt', 'asc'),
      limit(100) // Performance safeguard: limit to 100 most recent messages
    );

    // Execute query
    const querySnapshot = await getDocs(q);

    // Map Firestore documents to ChatMessage interface
    const messages: ChatMessage[] = querySnapshot.docs.map(doc => {
      const data = doc.data();
      return {
        id: doc.id,
        role: data.role as 'user' | 'assistant',
        content: data.content,
        // Convert Firestore Timestamp to JavaScript Date
        // Fallback to current date if timestamp is missing (shouldn't happen)
        timestamp: data.createdAt?.toDate ? data.createdAt.toDate() : new Date()
      };
    });

    return messages;
  } catch (error) {
    console.error('Failed to load chat history:', error);
    // Return empty array on error (don't crash)
    return [];
  }
}

/**
 * Optional: Subscribes to real-time chat history updates
 * 
 * @param canvasId - Canvas ID to subscribe to
 * @param userId - User ID to subscribe for
 * @param callback - Function called when messages change
 * @returns Unsubscribe function
 */
// Commented out for now - implement later if needed for real-time sync across tabs
/*
export function subscribeToChatHistory(
  canvasId: string,
  userId: string,
  callback: (messages: ChatMessage[]) => void
): () => void {
  const messagesRef = collection(firestore, 'chatMessages');
  const q = query(
    messagesRef,
    where('canvasId', '==', canvasId),
    where('userId', '==', userId),
    orderBy('createdAt', 'asc'),
    limit(100)
  );

  const unsubscribe = onSnapshot(q, (snapshot) => {
    const messages: ChatMessage[] = snapshot.docs.map(doc => {
      const data = doc.data();
      return {
        id: doc.id,
        role: data.role as 'user' | 'assistant',
        content: data.content,
        timestamp: data.createdAt?.toDate ? data.createdAt.toDate() : new Date()
      };
    });
    callback(messages);
  });

  return unsubscribe;
}
*/

